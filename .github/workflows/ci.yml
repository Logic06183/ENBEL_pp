name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC for dependency checks
    - cron: '0 6 * * *'

env:
  PYTHONPATH: ${{ github.workspace }}/src

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-mock black flake8 mypy isort bandit safety

    - name: Code formatting check (Black)
      run: |
        black --check --diff src/ tests/ scripts/
        
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff src/ tests/ scripts/

    - name: Linting (flake8)
      run: |
        flake8 src/ tests/ scripts/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking (mypy)
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional
        
    - name: Security check (bandit)
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Dependency security check (safety)
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-mock pytest-xdist

    - name: Create test directories
      run: |
        mkdir -p results/test
        mkdir -p models/test
        mkdir -p figures/test
        mkdir -p logs/test

    - name: Run unit tests
      run: |
        pytest tests/ -v \
          --cov=src/enbel_pp \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --junitxml=pytest-report.xml \
          -m "not slow" \
          --tb=short

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          pytest-report.xml
          htmlcov/
          .coverage

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-mock

    - name: Create test directories
      run: |
        mkdir -p results/integration
        mkdir -p models/integration
        mkdir -p figures/integration
        mkdir -p logs/integration

    - name: Run integration tests
      run: |
        pytest tests/ -v \
          -m "integration" \
          --tb=short \
          --timeout=300

    - name: Run slow tests
      run: |
        pytest tests/ -v \
          -m "slow" \
          --tb=short \
          --timeout=600

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

    - name: Build documentation
      run: |
        cd docs/
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t enbel-climate-health:test .

    - name: Test Docker image
      run: |
        docker run --rm enbel-climate-health:test python -c "import enbel_pp; print('Import successful')"

  reproducibility-check:
    name: Reproducibility Check
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run reproducibility test
      run: |
        python scripts/test_reproducibility.py

    - name: Compare results
      run: |
        python scripts/compare_results.py

  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Run benchmarks
      run: |
        pytest tests/test_benchmarks.py --benchmark-only --benchmark-json=benchmark.json

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        name: Python Performance Benchmarks
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  notify-slack:
    name: Slack Notification
    runs-on: ubuntu-latest
    needs: [quality-checks, tests, integration-tests, documentation, docker-build]
    if: always() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify success
      if: needs.quality-checks.result == 'success' && needs.tests.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'ENBEL CI Pipeline passed successfully! üéâ'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify failure
      if: needs.quality-checks.result == 'failure' || needs.tests.result == 'failure'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'ENBEL CI Pipeline failed! Please check the logs. ‚ùå'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}